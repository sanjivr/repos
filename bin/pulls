#!/usr/bin/env python
import sys
import site
import os
# `pip install --user` installs into this path
sys.path.append(os.path.join(site.USER_BASE, 'lib', 'python', 'site-packages'))
from subprocess import call

import base64
import argparse
import json
import csv
try:
  from pip import main as pipmain
except ImportError:
  from pip._internal import main as pipmain

try:
  import requests
except ImportError:
  pipmain(['install', '--user', 'requests'])
  import requests

import logging
from pprint import pprint

def debug():
  try:
      import http.client as http_client
  except ImportError:
     # Python 2
      import httplib as http_client
  http_client.HTTPConnection.debuglevel = 1
  logging.basicConfig()
  logging.getLogger().setLevel(logging.DEBUG)
  requests_log = logging.getLogger("requests.packages.urllib3")
  requests_log.setLevel(logging.DEBUG)
  requests_log.propagate = True

def authorization(token):
  return base64.encodestring('%s:%s' %(token, 'x-oauth-basic')).strip()

def org_pulls(token, org, server):
  url='https://%s/api/v3/orgs/%s/issues' %(server, org)
  headers = {}
  headers['Authorization'] = 'Basic %s' % authorization(token)

  pulls = []
  page = 1
  while True:
    logging.info('Page:%d' % page)
    params = {}
    params['filter'] = 'all'
    params['state'] = 'open'
    params['sort'] = 'updated'
    params['direction'] = 'desc'
    if page != 1:
        params['rel'] = 'next'
        params['page'] = page
    r = requests.get(url, headers=headers, params=params, timeout = 5)
    if r.status_code != 200:
      logging.debug("HTTP Response Code %d. Exiting" % r.status_code)
      break
    page += 1
    org_pulls = json.loads(r.text)
    if not org_pulls:
        break
    for pull in org_pulls:
        pulls.append(pull)
  return pulls 

def read_token(token_file):
    with open(token_file) as f:
        token = f.read().strip()
        logging.debug("Git Token %s" % token)
        return token

def pull_details(token, url):
    headers = {}
    headers['Authorization'] = 'Basic %s' % authorization(token)

    r = requests.get(url, headers=headers, timeout=5)
    if r.status_code != 200:
      logging.debug("HTTP Response Code %d. Exiting" % r.status_code)
      return {}

    return json.loads(r.text)

def main():
    #debug()

    token = read_token("path to token file")
    pulls = org_pulls(token, 'git org', 'git server')
    reports = []
    for pull in pulls:
        if 'pull_request' in pull:
            pull_info = pull_details(token, pull['pull_request']['url'])
            report = {}
            report['pull_request_title'] = pull['title']
            report['author'] = pull['user']['login']
            report['created_at'] = pull['created_at']
            report['updated_at'] = pull_info['updated_at']
            report['assignees'] = set()
            if pull['assignee']:
                report['assignees'].add(pull['assignee']['login'])
            for assignee in pull['assignees']:
                report['assignees'].add(assignee['login'])
            for reviewer in pull_info['requested_reviewers']:
                report['assignees'].add(reviewer['login'])
            report['assignees'] = ':'.join(list(report['assignees']))
            report['pull_request_url'] = pull['pull_request']['html_url']
            report['repository'] = pull['repository']['name']
            report['repository_url'] = pull['repository']['html_url']
            reports.append(report)

    with open("pulls.csv", "w") as f:
        fieldnames = ['pull_request_title', 'author', 'created_at', 'updated_at', 'assignees', 'pull_request_url', 'repository', 'repository_url']
        writer = csv.DictWriter(f, fieldnames=fieldnames)
        writer.writeheader()
        for report in reports:
            writer.writerow(report)
    
if __name__ == "__main__":
    main()
